# Título: Implementação de Árvore Binária de Busca (BST)
# Descrição: Uma implementação clássica de uma Árvore Binária de Busca em Python,
# demonstrando as operações de inserção, remoção e os três percursos principais.

# --- Classe que representa cada nó da árvore ---
class Node:
    def __init__(self, valor):
        self.valor = valor      # O dado armazenado no nó.
        self.esquerda = None  # Filho da esquerda (valores menores).
        self.direita = None   # Filho da direita (valores maiores).

# --- Classe que gerencia a estrutura da Árvore Binária de Busca ---
class ArvoreBinariaDeBusca:
    def __init__(self):
        self.raiz = None  # A raiz da árvore, inicialmente vazia.

    # --- Método público para inserir um valor ---
    def inserir(self, valor):
        if self.raiz is None:
            self.raiz = Node(valor)
        else:
            self._inserir_recursivo(self.raiz, valor)

    def _inserir_recursivo(self, nodo, valor):
        if valor < nodo.valor:
            if nodo.esquerda is None:
                nodo.esquerda = Node(valor)
            else:
                self._inserir_recursivo(nodo.esquerda, valor)
        else:
            if nodo.direita is None:
                nodo.direita = Node(valor)
            else:
                self._inserir_recursivo(nodo.direita, valor)

    # --- Método público para remover um valor ---
    def remover(self, valor):
        self.raiz = self._remover_recursivo(self.raiz, valor)

    def _remover_recursivo(self, nodo, valor):
        if nodo is None: return nodo
        if valor < nodo.valor:
            nodo.esquerda = self._remover_recursivo(nodo.esquerda, valor)
        elif valor > nodo.valor:
            nodo.direita = self._remover_recursivo(nodo.direita, valor)
        else: # Nó encontrado
            if nodo.esquerda is None: return nodo.direita
            elif nodo.direita is None: return nodo.esquerda
            temp = self._valor_minimo(nodo.direita)
            nodo.valor = temp.valor
            nodo.direita = self._remover_recursivo(nodo.direita, temp.valor)
        return nodo

    def _valor_minimo(self, nodo):
        atual = nodo
        while atual.esquerda is not None:
            atual = atual.esquerda
        return atual

    # --- Percursos (Traversals) ---
    def pre_ordem(self): # Raiz -> Esquerda -> Direita
        self._pre_ordem_recursivo(self.raiz)
        print()

    def _pre_ordem_recursivo(self, nodo):
        if nodo:
            print(nodo.valor, end=" ")
            self._pre_ordem_recursivo(nodo.esquerda)
            self._pre_ordem_recursivo(nodo.direita)

    def em_ordem(self): # Esquerda -> Raiz -> Direita
        self._em_ordem_recursivo(self.raiz)
        print()

    def _em_ordem_recursivo(self, nodo):
        if nodo:
            self._em_ordem_recursivo(nodo.esquerda)
            print(nodo.valor, end=" ")
            self._em_ordem_recursivo(nodo.direita)

    def pos_ordem(self): # Esquerda -> Direita -> Raiz
        self._pos_ordem_recursivo(self.raiz)
        print()

    def _pos_ordem_recursivo(self, nodo):
        if nodo:
            self._pos_ordem_recursivo(nodo.esquerda)
            self._pos_ordem_recursivo(nodo.direita)
            print(nodo.valor, end=" ")
